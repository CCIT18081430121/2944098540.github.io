<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>矩阵控制</title>
    <url>/2020/06/23/%E7%9F%A9%E9%98%B5%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="矩阵控制——控制板上任意小灯"><a href="#矩阵控制——控制板上任意小灯" class="headerlink" title="矩阵控制——控制板上任意小灯"></a><strong>矩阵控制</strong>——控制板上任意小灯</h2><p>我们依然通过数组来控制小灯的亮灭，赋值非和是控制亮与不亮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t&#x3D;[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">funttion led01()        </span><br><span class="line">       &#123;</span><br><span class="line">           if(t[0]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[0]&#x3D;led[0]|(1&lt;&lt;4);</span><br><span class="line">               t[0]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;4));</span><br><span class="line">               t[0]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led02()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[1]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[0]&#x3D;led[0]|(1&lt;&lt;3);</span><br><span class="line">               t[1]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;3));</span><br><span class="line">               t[1]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led03()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[2]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[0]&#x3D;led[0]|(1&lt;&lt;2);</span><br><span class="line">               t[2]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;2));</span><br><span class="line">               t[2]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led04()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[3]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[0]&#x3D;led[0]|(1&lt;&lt;1);</span><br><span class="line">               t[3]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;1));</span><br><span class="line">               t[3]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led05()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[4]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[0]&#x3D;led[0]|(1&lt;&lt;0);</span><br><span class="line">               t[4]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;0));</span><br><span class="line">               t[4]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       funttion led11()                  </span><br><span class="line">       &#123;</span><br><span class="line">           if(t[5]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[1]&#x3D;led[1]|(1&lt;&lt;4);</span><br><span class="line">               t[5]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;4));</span><br><span class="line">               t[5]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led12()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[6]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[1]&#x3D;led[1]|(1&lt;&lt;3);</span><br><span class="line">               t[6]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;3));</span><br><span class="line">               t[6]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led13()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[7]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[1]&#x3D;led[1]|(1&lt;&lt;2);</span><br><span class="line">               t[7]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;2));</span><br><span class="line">               t[7]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led14()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[8]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[1]&#x3D;led[1]|(1&lt;&lt;1);</span><br><span class="line">               t[8]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;1));</span><br><span class="line">               t[8]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led15()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[9]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[1]&#x3D;led[1]|(1&lt;&lt;0);</span><br><span class="line">               t[9]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;0));</span><br><span class="line">               t[9]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       funttion led21()                   </span><br><span class="line">       &#123;</span><br><span class="line">           if(t[10]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[2]&#x3D;led[2]|(1&lt;&lt;4);</span><br><span class="line">               t[10]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;4));</span><br><span class="line">               t[10]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led22()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[11]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[2]&#x3D;led[2]|(1&lt;&lt;3);</span><br><span class="line">               t[11]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;3));</span><br><span class="line">               t[11]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led23()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[12]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[2]&#x3D;led[2]|(1&lt;&lt;2);</span><br><span class="line">               t[12]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;2));</span><br><span class="line">               t[12]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led24()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[13]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[2]&#x3D;led[2]|(1&lt;&lt;1);</span><br><span class="line">               t[13]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;1));</span><br><span class="line">               t[13]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led25()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[14]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[2]&#x3D;led[2]|(1&lt;&lt;0);</span><br><span class="line">               t[14]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;0));</span><br><span class="line">               t[14]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       funttion led31()                   </span><br><span class="line">       &#123;</span><br><span class="line">           if(t[15]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[3]&#x3D;led[3]|(1&lt;&lt;4);</span><br><span class="line">               t[15]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;4));</span><br><span class="line">               t[15]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led32()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[16]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[3]&#x3D;led[3]|(1&lt;&lt;3);</span><br><span class="line">               t[16]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;3));</span><br><span class="line">               t[16]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led33()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[17]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[3]&#x3D;led[3]|(1&lt;&lt;2);</span><br><span class="line">               t[17]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;2));</span><br><span class="line">               t[17]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led34()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[18]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[3]&#x3D;led[3]|(1&lt;&lt;1);</span><br><span class="line">               t[18]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;1));</span><br><span class="line">               t[18]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led35()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[19]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[3]&#x3D;led[3]|(1&lt;&lt;0);</span><br><span class="line">               t[19]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;0));</span><br><span class="line">               t[19]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led41()                   </span><br><span class="line">       &#123;</span><br><span class="line">           if(t[20]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[4]&#x3D;led[4]|(1&lt;&lt;4);</span><br><span class="line">               t[20]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;4));</span><br><span class="line">               t[20]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led42()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[21]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[4]&#x3D;led[4]|(1&lt;&lt;3);</span><br><span class="line">               t[21]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;3));</span><br><span class="line">               t[21]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led43()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[22]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[4]&#x3D;led[4]|(1&lt;&lt;2);</span><br><span class="line">               t[22]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;2));</span><br><span class="line">               t[22]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led44()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[23]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[4]&#x3D;led[4]|(1&lt;&lt;1);</span><br><span class="line">               t[23]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;1));</span><br><span class="line">               t[23]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br><span class="line">       funttion led45()</span><br><span class="line">       &#123;</span><br><span class="line">           if(t[24]&#x3D;&#x3D;0)</span><br><span class="line">           &#123;</span><br><span class="line">               led[4]&#x3D;led[4]|(1&lt;&lt;0);</span><br><span class="line">               t[24]&#x3D;1;</span><br><span class="line">           &#125;</span><br><span class="line">           else&#123;</span><br><span class="line">               led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;0));</span><br><span class="line">               t[24]&#x3D;0;</span><br><span class="line">           &#125;</span><br><span class="line">           randLED();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<p>网页显示控制小灯的按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;Matrix control - any small lamp on the control board&lt;&#x2F;h3&gt; </span><br><span class="line">	   &lt;button id&#x3D;&quot;led01&quot; onclick&#x3D;&quot;led00()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led02&quot; onclick&#x3D;&quot;led01()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led03&quot; onclick&#x3D;&quot;led02()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led04&quot; onclick&#x3D;&quot;led03()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led05&quot; onclick&#x3D;&quot;led04()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;br&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led11&quot; onclick&#x3D;&quot;led10()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led12&quot; onclick&#x3D;&quot;led11()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led13&quot; onclick&#x3D;&quot;led12()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led14&quot; onclick&#x3D;&quot;led13()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led15&quot; onclick&#x3D;&quot;led14()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;br&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led21&quot; onclick&#x3D;&quot;led20()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led22&quot; onclick&#x3D;&quot;led21()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led23&quot; onclick&#x3D;&quot;led22()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led24&quot; onclick&#x3D;&quot;led23()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led25&quot; onclick&#x3D;&quot;led24()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;br&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led31&quot; onclick&#x3D;&quot;led30()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led32&quot; onclick&#x3D;&quot;led31()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led33&quot; onclick&#x3D;&quot;led32()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led34&quot; onclick&#x3D;&quot;led33()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led35&quot; onclick&#x3D;&quot;led34()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;br&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led41&quot; onclick&#x3D;&quot;led40()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led42&quot; onclick&#x3D;&quot;led41()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led43&quot; onclick&#x3D;&quot;led42()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led44&quot; onclick&#x3D;&quot;led43()&quot;&gt; &lt;&#x2F;button&gt;</span><br><span class="line">       &lt;button id&#x3D;&quot;led45&quot; onclick&#x3D;&quot;led44()&quot;&gt; &lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>



<p>接下来我们名正言顺的显示一颗爱心：</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3689356117,2028656081&fm=26&gp=0.jpg" alt="点击查看源网页"></p>
<p><strong>名正言顺的不会：</strong><a href="https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/" target="_blank" rel="noopener">https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/</a></p>
]]></content>
  </entry>
  <entry>
    <title>加速度计得三轴值</title>
    <url>/2020/06/23/%E5%8A%A0%E9%80%9F%E5%BA%A6%E8%AE%A1%E5%BE%97%E4%B8%89%E8%BD%B4%E5%80%BC/</url>
    <content><![CDATA[<h1 id="加速度计得三轴值"><a href="#加速度计得三轴值" class="headerlink" title="加速度计得三轴值"></a><strong>加速度计得三轴值</strong></h1><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><p>加速度传感器利用x,y,z三个坐标代表bit板的位置并判断板子位置是否发生改变，我们同样也用到了板子的服务和特性——调用加速度服务的特性读取并显示在网页上</p>
<h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        var    selected_device; &#x2F;&#x2F;选择设备</span><br><span class="line">        var    connected_server; &#x2F;&#x2F;连接设备</span><br><span class="line">        var    connected&#x3D;false;&#x2F;&#x2F;连接状态</span><br><span class="line">        var    services_discovered&#x3D;false;&#x2F;&#x2F;发现设备状态</span><br><span class="line">        &#x2F;&#x2F; 添加服务和特性状态变量 </span><br><span class="line">        var has_accelerometer_service &#x3D; false; &#x2F;&#x2F;加速度服务状态</span><br><span class="line">        var has_accelerometer_data &#x3D; false; &#x2F;&#x2F;加速度特性状态</span><br><span class="line">        var has_led_service &#x3D; false;&#x2F;&#x2F;led服务状态</span><br><span class="line">        var has_led_matrix_state &#x3D; false; &#x2F;&#x2F;led控制特性状态</span><br><span class="line">        var has_device_information_service &#x3D; false; &#x2F;&#x2F;设备信息服务状态</span><br><span class="line">        var has_model_name_string &#x3D; false; &#x2F;&#x2F;设备信息特性状态</span><br><span class="line">        var has_temperature_service &#x3D;false;    &#x2F;&#x2F;温度服务状态</span><br><span class="line">        var has_tem_temperature &#x3D; false;  &#x2F;&#x2F;温度特性状态</span><br><span class="line">         &#x2F;&#x2F; 服务 UUIDs </span><br><span class="line">       ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;;</span><br><span class="line">       TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       &#x2F;&#x2F; 特性 UUIDs </span><br><span class="line">       ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       LED_MATRIX_STATE  &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;;</span><br><span class="line">       TEM_TEMPERATURE &#x3D; &#39;e95d1b25-251d-470a-a062-fa1922dfa9a8&#39;;  </span><br><span class="line">       &#x2F;&#x2F; 添加特性变量 </span><br><span class="line">       var led_matrix_state; </span><br><span class="line">        var model_number_string;</span><br><span class="line">        var accelerometer_data;</span><br><span class="line">        var tem_temperature;    </span><br><span class="line">          &#x2F;&#x2F;添加服务，特性相关参数</span><br><span class="line">        var service_count;</span><br><span class="line">         var services_discovered;</span><br><span class="line">         var characteristics_discovered;  </span><br><span class="line">         var characteristic_count ;               </span><br><span class="line">         function discoverOrdisconnectDevices()&#x2F;&#x2F; 断开连接</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;discoverOrdisconnectDevices&quot;);</span><br><span class="line">            if(!connected)</span><br><span class="line">            discoverDevices();</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                selected_device.gatt.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        function onDisconnected()&#x2F;&#x2F;连接</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;onDisconnected&quot;);</span><br><span class="line">            resetUI();</span><br><span class="line">        &#125;</span><br><span class="line">		&#x2F;&#x2F;function input.temperature(): number;</span><br><span class="line">        function discoverDevices()&#x2F;&#x2F; 搜索设备函数</span><br><span class="line">        &#123; </span><br><span class="line">            console.log(&quot;discoverDevices&quot;);</span><br><span class="line">            var options &#x3D; &#123;acceptAllDevices:true,</span><br><span class="line">                optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE]  &#x2F;&#x2F;在第5节课上添加</span><br><span class="line">            &#125;        &#x2F;&#x2F;发现所有周边蓝牙设备</span><br><span class="line">           </span><br><span class="line">            navigator.bluetooth.requestDevice(options)</span><br><span class="line">            .then(device &#x3D;&gt; &#123;</span><br><span class="line">                console.log(&#39;&gt; Name:&#39; + device.name);</span><br><span class="line">                console.log(&#39;&gt; Id:&#39; + device.id);</span><br><span class="line">                console.log(&#39;&gt; Connected:&#39; + device.gatt.connected);</span><br><span class="line">                selected_device &#x3D; device;</span><br><span class="line">                console.log(selected_device);</span><br><span class="line">                connect();</span><br><span class="line">                &#125;)</span><br><span class="line">            .catch(error &#x3D;&gt; &#123;</span><br><span class="line">                alert(&#39;ERROR&#39; +error);</span><br><span class="line">                console.log(&#39;ERROR&#39; +error);</span><br><span class="line">                &#125;);       </span><br><span class="line">        &#125;       </span><br><span class="line">        function connect()	&#x2F;&#x2F;连接函数</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;connecting&quot;);</span><br><span class="line">            selected_device.gatt.connect()</span><br><span class="line">            .then(</span><br><span class="line">                function (server)</span><br><span class="line">                &#123;</span><br><span class="line">                    console.log(&quot;Connected to&quot; + server.device.id);</span><br><span class="line">                    console.log(&quot;Connected &quot; + server.connected);</span><br><span class="line">                    selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected);</span><br><span class="line">                    connected_server &#x3D;server;</span><br><span class="line">                    discoverSvcsAndChars(); &#x2F;&#x2F;在第5课基础上添加的函数</span><br><span class="line">                    setConnectedStatus(true);</span><br><span class="line">                &#125;,</span><br><span class="line">                function (error)</span><br><span class="line">                &#123;</span><br><span class="line">                    console.log(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                   alert(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                   setConnectedStatus(false);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        function setConnectedStatus(status)&#x2F;&#x2F;设置连接状态</span><br><span class="line">        &#123;</span><br><span class="line">            connected&#x3D;status;</span><br><span class="line">            document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status;</span><br><span class="line">            if(status&#x3D;&#x3D;true)</span><br><span class="line">            &#123;</span><br><span class="line">                document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        function setDiscoveryStatus(status)&#x2F;&#x2F;设置发现状态</span><br><span class="line">        &#123;</span><br><span class="line">            services_discovered&#x3D;status;</span><br><span class="line">            document.getElementById(&#39;status_discovered&#39;).innerHTML&#x3D;status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function resetUI()	&#x2F;&#x2F;重置页面</span><br><span class="line">        &#123;</span><br><span class="line">            setConnectedStatus(false);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        function discoverSvcsAndChars()    &#x2F;&#x2F;发现服务和特性</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); </span><br><span class="line">            connected_server.getPrimaryServices()</span><br><span class="line">            .then(services &#x3D;&gt; </span><br><span class="line">            &#123;    </span><br><span class="line">                    has_accelerometer_service &#x3D; false;    </span><br><span class="line">                    has_led_service &#x3D; false;    </span><br><span class="line">                    has_device_information_service &#x3D; false; </span><br><span class="line">                    has_temperature_service&#x3D; false;</span><br><span class="line"></span><br><span class="line">                    services_discovered &#x3D; 0;    </span><br><span class="line">                    service_count &#x3D; services.length;    </span><br><span class="line">                    console.log(&quot;Got &quot; + service_count + &quot; services&quot;); </span><br><span class="line">        </span><br><span class="line">                    services.forEach(service &#x3D;&gt; </span><br><span class="line">                    &#123;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE)</span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_accelerometer_service &#x3D; true;    </span><br><span class="line">                        &#125;   </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; LED_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_led_service &#x3D; true;     </span><br><span class="line">                        &#125;     </span><br><span class="line">                       if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_device_information_service &#x3D; true;     </span><br><span class="line">                        &#125; </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#x2F;&#x2F;温度</span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_temperature_service &#x3D; true;     </span><br><span class="line">                        &#125;        </span><br><span class="line">                        console.log(&#39;Getting Characteristics for service &#39; + service.uuid);     </span><br><span class="line">                        service.getCharacteristics()</span><br><span class="line">                        .then(characteristics &#x3D;&gt; </span><br><span class="line">                        &#123;      </span><br><span class="line">                            console.log(&#39;&gt; Service: &#39; + service.uuid);      </span><br><span class="line">                            services_discovered++;     </span><br><span class="line">                            characteristics_discovered &#x3D; 0;      </span><br><span class="line">                            characteristic_count &#x3D; characteristics.length;      </span><br><span class="line">                            characteristics.forEach(characteristic &#x3D;&gt; </span><br><span class="line">                            &#123;       </span><br><span class="line">                                characteristics_discovered++;       </span><br><span class="line">                                console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid);       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA)</span><br><span class="line">                                &#123;        </span><br><span class="line">                                    accelerometer_data &#x3D; characteristic;        </span><br><span class="line">                                    has_accelerometer_data &#x3D; true;       </span><br><span class="line">                                &#125;      </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    led_matrix_state &#x3D; characteristic;        </span><br><span class="line">                                    has_led_matrix_state &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    model_number_string &#x3D; characteristic;        </span><br><span class="line">                                    has_model_name_string &#x3D; true;       </span><br><span class="line">                                &#125;</span><br><span class="line">                                if(characteristic.uuid &#x3D;&#x3D; TEM_TEMPERATURE)  &#x2F;&#x2F;温度</span><br><span class="line">                                &#123;</span><br><span class="line">                                    tem_temperature &#x3D; characteristic; </span><br><span class="line">                                    has_tem_temperature &#x3D; true;</span><br><span class="line">                                &#125;     </span><br><span class="line">                                if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    console.log(&quot;FINISHED DISCOVERY&quot;); </span><br><span class="line">                                    setDiscoveryStatus(true);       </span><br><span class="line">                                    &#x2F;&#x2F;setDiscoveryStatus(true);                  </span><br><span class="line">                                &#125;    </span><br><span class="line">                            &#125;);     </span><br><span class="line">                        &#125;);    </span><br><span class="line">                    &#125;);  </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;  </span><br><span class="line">		var i&#x3D;0;</span><br><span class="line">        function randomLEDs()   &#x2F;&#x2F;控制led</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;randomLEDs&quot;);   </span><br><span class="line">            &#x2F;&#x2F; state validation   </span><br><span class="line">            if (!connected) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!services_discovered) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">                return;  </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_led_service) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the LED service&quot;);     </span><br><span class="line">                return;  </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_led_matrix_state) </span><br><span class="line">            &#123;      </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;);      </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">			 &#123;</span><br><span class="line">				 led_array[0] &#x3D; 0;</span><br><span class="line">				 led_array[1] &#x3D; 0;   </span><br><span class="line">				 led_array[2] &#x3D; 0;   </span><br><span class="line">				 led_array[3] &#x3D; 0;   </span><br><span class="line">				 led_array[4] &#x3D; 0;</span><br><span class="line">			 &#125;</span><br><span class="line">			 </span><br><span class="line"></span><br><span class="line">             &#x2F;&#x2F; Math.random():0~1  Math.floor(x):返回小于等于x的最大整数</span><br><span class="line">            &#x2F;*led_array[0] &#x3D;10;  </span><br><span class="line">            led_array[1] &#x3D; 31;   </span><br><span class="line">            led_array[2] &#x3D; 31;   </span><br><span class="line">            led_array[3] &#x3D; 14;   </span><br><span class="line">            led_array[4] &#x3D; 4;*&#x2F;</span><br><span class="line">            &#x2F;*led_array[0] &#x3D; 31;  </span><br><span class="line">            led_array[1] &#x3D; 17;   </span><br><span class="line">            led_array[2] &#x3D; 17;   </span><br><span class="line">            led_array[3] &#x3D; 17;   </span><br><span class="line">            led_array[4] &#x3D; 31; *&#x2F;</span><br><span class="line"> </span><br><span class="line">            var led_matrix_data &#x3D; new Uint8Array(led_array); </span><br><span class="line"></span><br><span class="line">            led_matrix_state.writeValue(led_matrix_data.buffer)</span><br><span class="line">            .then(_ &#x3D;&gt; &#123;   </span><br><span class="line">                console.log(&#39;LED matrix state changed&#39;);  </span><br><span class="line">                &#125;)  </span><br><span class="line">            .catch(error &#x3D;&gt; &#123;   </span><br><span class="line">                console.log(&#39;Error: &#39; + error);   </span><br><span class="line">                alert(&#39;Error: &#39; + error);   return;  </span><br><span class="line">                &#125;); </span><br><span class="line">        &#125;  </span><br><span class="line">        function readModelNumber()  &#x2F;&#x2F; 蓝牙信息服务</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;readModelNumber&quot;);   </span><br><span class="line">            &#x2F;&#x2F; state validation   </span><br><span class="line">            if (!connected) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!services_discovered) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;    </span><br><span class="line">            if (!has_device_information_service) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the device information service&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_model_name_string) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            </span><br><span class="line">            model_number_string.readValue()</span><br><span class="line">            .then(value &#x3D;&gt; &#123;   </span><br><span class="line">                data &#x3D; new Uint8Array(value.buffer);   </span><br><span class="line">                model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data);  </span><br><span class="line">                console.log(model_number_string);   </span><br><span class="line">                document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string;  </span><br><span class="line">                &#125;)  </span><br><span class="line">            .catch(error &#x3D;&gt; &#123;  </span><br><span class="line">                console.log(&#39;Error: &#39; + error);   </span><br><span class="line">                alert(&#39;Error: &#39; + error);   </span><br><span class="line">                return;  </span><br><span class="line">                &#125;); </span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">				  function accelerometer()   &#x2F;&#x2F;加速度传感器</span><br><span class="line">				 &#123;  </span><br><span class="line">				     console.log(&quot;accelerometer&quot;);   </span><br><span class="line">				     &#x2F;&#x2F; state validation   </span><br><span class="line">				     if (!connected) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">				         return;   </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!services_discovered) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">				         return;  </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!has_accelerometer_service) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: The connected device does not contain the accelerometer service&quot;);     </span><br><span class="line">				         return;  </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!has_accelerometer_data) </span><br><span class="line">				     &#123;      </span><br><span class="line">				         alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;);      </span><br><span class="line">				         return;   </span><br><span class="line">				     &#125;   </span><br><span class="line">				 </span><br><span class="line">				     accelerometer_data.readValue()</span><br><span class="line">				    .then(value &#x3D;&gt; &#123;</span><br><span class="line">				      buffer &#x3D; value.buffer;</span><br><span class="line">				      dataview &#x3D; new DataView(buffer);</span><br><span class="line">				      X &#x3D; dataview.getUint16(0, true);</span><br><span class="line">				      Y &#x3D; dataview.getUint16(2, true);</span><br><span class="line">				      Z &#x3D; dataview.getUint16(4, true);</span><br><span class="line">				      console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z);</span><br><span class="line">				      document.getElementById(&quot;ac_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;,Z&#x3D;&quot; + Z;</span><br><span class="line">				        &#125;)  </span><br><span class="line">				    .catch(error &#x3D;&gt; &#123;  </span><br><span class="line">				        console.log(&#39;Error: &#39; + error);   </span><br><span class="line">				        alert(&#39;Error: &#39; + error);   </span><br><span class="line">				        return;  </span><br><span class="line">				        &#125;); </span><br><span class="line">				        </span><br><span class="line">				       </span><br><span class="line">				 &#125;  </span><br><span class="line">				 </span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h2&gt;  Status</span><br><span class="line">        &lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;     &lt;b&gt;Connected&lt;&#x2F;b&gt;   &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;     &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt;   &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;table&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            Device Discovery or Disconnect</span><br><span class="line">        &lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button id &#x3D; &quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt;  </span><br><span class="line">        &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h3&gt;Read Characteristic - Model number&lt;&#x2F;h3&gt;  </span><br><span class="line">        &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model number&lt;&#x2F;button&gt; </span><br><span class="line">        &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;h3&gt;accelerometer_data&lt;&#x2F;h3&gt;</span><br><span class="line">		&lt;button id&#x3D;&quot;btn_readAC&quot; onclick&#x3D;&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;&#x2F;button&gt; </span><br><span class="line">		&lt;div id&#x3D;&quot;ac_data&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>











<h4 id="增添部分"><a href="#增添部分" class="headerlink" title="增添部分"></a>增添部分</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button id&#x3D;&quot;btn_readAC&quot; onclick&#x3D;&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;&#x2F;button&gt; </span><br><span class="line"></span><br><span class="line">  function accelerometer()   &#x2F;&#x2F;加速度传感器</span><br><span class="line">				 &#123;  </span><br><span class="line">				     console.log(&quot;accelerometer&quot;);   </span><br><span class="line">				     &#x2F;&#x2F; state validation   </span><br><span class="line">				     if (!connected) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">				         return;   </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!services_discovered) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">				         return;  </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!has_accelerometer_service) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: The connected device does not contain the accelerometer service&quot;);     </span><br><span class="line">				         return;  </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!has_accelerometer_data) </span><br><span class="line">				     &#123;      </span><br><span class="line">				         alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;);      </span><br><span class="line">				         return;   </span><br><span class="line">				     &#125;   </span><br><span class="line">				 </span><br><span class="line">				     accelerometer_data.readValue()</span><br><span class="line">				    .then(value &#x3D;&gt; &#123;</span><br><span class="line">				      buffer &#x3D; value.buffer;</span><br><span class="line">				      dataview &#x3D; new DataView(buffer);</span><br><span class="line">				      X &#x3D; dataview.getUint16(0, true);</span><br><span class="line">				      Y &#x3D; dataview.getUint16(2, true);</span><br><span class="line">				      Z &#x3D; dataview.getUint16(4, true);</span><br><span class="line">				      console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z);</span><br><span class="line">				      document.getElementById(&quot;ac_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;,Z&#x3D;&quot; + Z;</span><br><span class="line">				        &#125;)  </span><br><span class="line">				    .catch(error &#x3D;&gt; &#123;  </span><br><span class="line">				        console.log(&#39;Error: &#39; + error);   </span><br><span class="line">				        alert(&#39;Error: &#39; + error);   </span><br><span class="line">				        return;  </span><br><span class="line">				        &#125;); </span><br><span class="line">				        </span><br><span class="line">				       </span><br><span class="line">				 &#125;</span><br></pre></td></tr></table></figure>

<p>当我们单击Read accelerometer_data</p>
<p>就得到micro板坐标。</p>
<p><strong>召唤问题魔法师：</strong><a href="https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/" target="_blank" rel="noopener">https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/</a></p>
<p>附(free)：</p>
<p><img src="https://raw.githubusercontent.com/CCIT18081430121/img/master/20200623123802.jpg" alt="点击查看源网页"></p>
]]></content>
  </entry>
  <entry>
    <title>行列灯</title>
    <url>/2020/06/23/%E8%A1%8C%E5%88%97%E7%81%AF/</url>
    <content><![CDATA[<h1 id="行列灯的控制"><a href="#行列灯的控制" class="headerlink" title="行列灯的控制"></a>行列灯的控制</h1><h3 id="一、原理解析"><a href="#一、原理解析" class="headerlink" title="一、原理解析"></a>一、原理解析</h3><p>​    灯的行和列用数组和网页控制</p>
<h5 id="1-代码"><a href="#1-代码" class="headerlink" title="(1)代码"></a>(1)代码</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function randomLEDs(t)   &#x2F;&#x2F;控制led</span><br><span class="line">      &#123;  </span><br><span class="line">          console.log(&quot;randomLEDs&quot;);   </span><br><span class="line">          &#x2F;&#x2F; state validation   </span><br><span class="line">          if (!connected) </span><br><span class="line">          &#123;     </span><br><span class="line">              alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">              return;   </span><br><span class="line">          &#125;   </span><br><span class="line">          if (!services_discovered) </span><br><span class="line">          &#123;     </span><br><span class="line">              alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">              return;  </span><br><span class="line">          &#125;   </span><br><span class="line">          if (!has_led_service) </span><br><span class="line">          &#123;     </span><br><span class="line">              alert(&quot;Error: The connected device does not contain the LED service&quot;);     </span><br><span class="line">              return;  </span><br><span class="line">          &#125;   </span><br><span class="line">          if (!has_led_matrix_state) </span><br><span class="line">          &#123;      </span><br><span class="line">              alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;);      </span><br><span class="line">              return;   </span><br><span class="line">          &#125;   </span><br><span class="line">	var led_array&#x3D;[];</span><br><span class="line">	if(t&#x3D;&#x3D;0)</span><br><span class="line">	&#123;</span><br><span class="line">		 led_array[0] &#x3D;	1&lt;&lt;i;</span><br><span class="line">		 led_array[1] &#x3D; 1&lt;&lt;i;   </span><br><span class="line">		 led_array[2] &#x3D; 1&lt;&lt;i;   </span><br><span class="line">		 led_array[3] &#x3D; 1&lt;&lt;i;   </span><br><span class="line">		 led_array[4] &#x3D; 1&lt;&lt;i;</span><br><span class="line">		 i++;</span><br><span class="line">		 if(i&#x3D;&#x3D;5)i&#x3D;0;</span><br><span class="line">	&#125;</span><br><span class="line">	else if(t&#x3D;&#x3D;1)</span><br><span class="line">	&#123;</span><br><span class="line">		led_array[0] &#x3D; 0;</span><br><span class="line">		led_array[1] &#x3D; 0;   </span><br><span class="line">		led_array[2] &#x3D; 0;   </span><br><span class="line">		led_array[3] &#x3D; 0;   </span><br><span class="line">		led_array[4] &#x3D; 0;</span><br><span class="line">		led_array[j] &#x3D; 31;</span><br><span class="line">		j++;</span><br><span class="line">		if(j&#x3D;&#x3D;5)j&#x3D;0;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F; Math.random():0~1  Math.floor(x):返回小于等于x的最大整数</span><br><span class="line">          &#x2F;*led_array[0] &#x3D;10;  </span><br><span class="line">          led_array[1] &#x3D; 31;   </span><br><span class="line">          led_array[2] &#x3D; 31;   </span><br><span class="line">          led_array[3] &#x3D; 14;   </span><br><span class="line">          led_array[4] &#x3D; 4;*&#x2F;</span><br><span class="line">          &#x2F;*led_array[0] &#x3D; 31;  </span><br><span class="line">          led_array[1] &#x3D; 17;   </span><br><span class="line">          led_array[2] &#x3D; 17;   </span><br><span class="line">          led_array[3] &#x3D; 17;   </span><br><span class="line">          led_array[4] &#x3D; 31; *&#x2F;</span><br><span class="line"> </span><br><span class="line">          var led_matrix_data &#x3D; new Uint8Array(led_array); </span><br><span class="line"></span><br><span class="line">          led_matrix_state.writeValue(led_matrix_data.buffer)</span><br><span class="line">          .then(_ &#x3D;&gt; &#123;   </span><br><span class="line">              console.log(&#39;LED matrix state changed&#39;);  </span><br><span class="line">              &#125;)  </span><br><span class="line">          .catch(error &#x3D;&gt; &#123;   </span><br><span class="line">              console.log(&#39;Error: &#39; + error);   </span><br><span class="line">              alert(&#39;Error: &#39; + error);   return;  </span><br><span class="line">              &#125;); </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>









<h2 id="二、整体代码"><a href="#二、整体代码" class="headerlink" title="二、整体代码"></a>二、整体代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">        var    selected_device; &#x2F;&#x2F;选择设备</span><br><span class="line">        var    connected_server; &#x2F;&#x2F;连接设备</span><br><span class="line">        var    connected&#x3D;false;&#x2F;&#x2F;连接状态</span><br><span class="line">        var    services_discovered&#x3D;false;&#x2F;&#x2F;发现设备状态</span><br><span class="line">        &#x2F;&#x2F; 添加服务和特性状态变量 </span><br><span class="line">        var has_accelerometer_service &#x3D; false; &#x2F;&#x2F;加速度服务状态</span><br><span class="line">        var has_accelerometer_data &#x3D; false; &#x2F;&#x2F;加速度特性状态</span><br><span class="line">        var has_led_service &#x3D; false;&#x2F;&#x2F;led服务状态</span><br><span class="line">        var has_led_matrix_state &#x3D; false; &#x2F;&#x2F;led控制特性状态</span><br><span class="line">        var has_device_information_service &#x3D; false; &#x2F;&#x2F;设备信息服务状态</span><br><span class="line">        var has_model_name_string &#x3D; false; &#x2F;&#x2F;设备信息特性状态</span><br><span class="line">        var has_temperature_service &#x3D;false;    &#x2F;&#x2F;温度服务状态</span><br><span class="line">        var has_tem_temperature &#x3D; false;  &#x2F;&#x2F;温度特性状态</span><br><span class="line">         &#x2F;&#x2F; 服务 UUIDs </span><br><span class="line">       ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;;</span><br><span class="line">       TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       &#x2F;&#x2F; 特性 UUIDs </span><br><span class="line">       ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       LED_MATRIX_STATE  &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;;</span><br><span class="line">       TEM_TEMPERATURE &#x3D; &#39;e95d1b25-251d-470a-a062-fa1922dfa9a8&#39;;  </span><br><span class="line">       &#x2F;&#x2F; 添加特性变量 </span><br><span class="line">       var led_matrix_state; </span><br><span class="line">        var model_number_string;</span><br><span class="line">        var accelerometer_data;</span><br><span class="line">        var tem_temperature;    </span><br><span class="line">          &#x2F;&#x2F;添加服务，特性相关参数</span><br><span class="line">        var service_count;</span><br><span class="line">         var services_discovered;</span><br><span class="line">         var characteristics_discovered;  </span><br><span class="line">         var characteristic_count ;               </span><br><span class="line">         function discoverOrdisconnectDevices()&#x2F;&#x2F; 断开连接</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;discoverOrdisconnectDevices&quot;);</span><br><span class="line">            if(!connected)</span><br><span class="line">            discoverDevices();</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                selected_device.gatt.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        function onDisconnected()&#x2F;&#x2F;连接</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;onDisconnected&quot;);</span><br><span class="line">            resetUI();</span><br><span class="line">        &#125;</span><br><span class="line">		&#x2F;&#x2F;function input.temperature(): number;</span><br><span class="line">        function discoverDevices()&#x2F;&#x2F; 搜索设备函数</span><br><span class="line">        &#123; </span><br><span class="line">            console.log(&quot;discoverDevices&quot;);</span><br><span class="line">            var options &#x3D; &#123;acceptAllDevices:true,</span><br><span class="line">                optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE]  &#x2F;&#x2F;在第5节课上添加</span><br><span class="line">            &#125;        &#x2F;&#x2F;发现所有周边蓝牙设备</span><br><span class="line">           </span><br><span class="line">            navigator.bluetooth.requestDevice(options)</span><br><span class="line">            .then(device &#x3D;&gt; &#123;</span><br><span class="line">                console.log(&#39;&gt; Name:&#39; + device.name);</span><br><span class="line">                console.log(&#39;&gt; Id:&#39; + device.id);</span><br><span class="line">                console.log(&#39;&gt; Connected:&#39; + device.gatt.connected);</span><br><span class="line">                selected_device &#x3D; device;</span><br><span class="line">                console.log(selected_device);</span><br><span class="line">                connect();</span><br><span class="line">                &#125;)</span><br><span class="line">            .catch(error &#x3D;&gt; &#123;</span><br><span class="line">                alert(&#39;ERROR&#39; +error);</span><br><span class="line">                console.log(&#39;ERROR&#39; +error);</span><br><span class="line">                &#125;);       </span><br><span class="line">        &#125;       </span><br><span class="line">        function connect()	&#x2F;&#x2F;连接函数</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;connecting&quot;);</span><br><span class="line">            selected_device.gatt.connect()</span><br><span class="line">            .then(</span><br><span class="line">                function (server)</span><br><span class="line">                &#123;</span><br><span class="line">                    console.log(&quot;Connected to&quot; + server.device.id);</span><br><span class="line">                    console.log(&quot;Connected &quot; + server.connected);</span><br><span class="line">                    selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected);</span><br><span class="line">                    connected_server &#x3D;server;</span><br><span class="line">                    discoverSvcsAndChars(); &#x2F;&#x2F;在第5课基础上添加的函数</span><br><span class="line">                    setConnectedStatus(true);</span><br><span class="line">                &#125;,</span><br><span class="line">                function (error)</span><br><span class="line">                &#123;</span><br><span class="line">                    console.log(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                   alert(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                   setConnectedStatus(false);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        function setConnectedStatus(status)&#x2F;&#x2F;设置连接状态</span><br><span class="line">        &#123;</span><br><span class="line">            connected&#x3D;status;</span><br><span class="line">            document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status;</span><br><span class="line">            if(status&#x3D;&#x3D;true)</span><br><span class="line">            &#123;</span><br><span class="line">                document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        function setDiscoveryStatus(status)&#x2F;&#x2F;设置发现状态</span><br><span class="line">        &#123;</span><br><span class="line">            services_discovered&#x3D;status;</span><br><span class="line">            document.getElementById(&#39;status_discovered&#39;).innerHTML&#x3D;status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function resetUI()	&#x2F;&#x2F;重置页面</span><br><span class="line">        &#123;</span><br><span class="line">            setConnectedStatus(false);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        function discoverSvcsAndChars()    &#x2F;&#x2F;发现服务和特性</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); </span><br><span class="line">            connected_server.getPrimaryServices()</span><br><span class="line">            .then(services &#x3D;&gt; </span><br><span class="line">            &#123;    </span><br><span class="line">                    has_accelerometer_service &#x3D; false;    </span><br><span class="line">                    has_led_service &#x3D; false;    </span><br><span class="line">                    has_device_information_service &#x3D; false; </span><br><span class="line">                    has_temperature_service&#x3D; false;</span><br><span class="line"></span><br><span class="line">                    services_discovered &#x3D; 0;    </span><br><span class="line">                    service_count &#x3D; services.length;    </span><br><span class="line">                    console.log(&quot;Got &quot; + service_count + &quot; services&quot;); </span><br><span class="line">        </span><br><span class="line">                    services.forEach(service &#x3D;&gt; </span><br><span class="line">                    &#123;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE)</span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_accelerometer_service &#x3D; true;    </span><br><span class="line">                        &#125;   </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; LED_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_led_service &#x3D; true;     </span><br><span class="line">                        &#125;     </span><br><span class="line">                       if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_device_information_service &#x3D; true;     </span><br><span class="line">                        &#125; </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#x2F;&#x2F;温度</span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_temperature_service &#x3D; true;     </span><br><span class="line">                        &#125;        </span><br><span class="line">                        console.log(&#39;Getting Characteristics for service &#39; + service.uuid);     </span><br><span class="line">                        service.getCharacteristics()</span><br><span class="line">                        .then(characteristics &#x3D;&gt; </span><br><span class="line">                        &#123;      </span><br><span class="line">                            console.log(&#39;&gt; Service: &#39; + service.uuid);      </span><br><span class="line">                            services_discovered++;     </span><br><span class="line">                            characteristics_discovered &#x3D; 0;      </span><br><span class="line">                            characteristic_count &#x3D; characteristics.length;      </span><br><span class="line">                            characteristics.forEach(characteristic &#x3D;&gt; </span><br><span class="line">                            &#123;       </span><br><span class="line">                                characteristics_discovered++;       </span><br><span class="line">                                console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid);       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA)</span><br><span class="line">                                &#123;        </span><br><span class="line">                                    accelerometer_data &#x3D; characteristic;        </span><br><span class="line">                                    has_accelerometer_data &#x3D; true;       </span><br><span class="line">                                &#125;      </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    led_matrix_state &#x3D; characteristic;        </span><br><span class="line">                                    has_led_matrix_state &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    model_number_string &#x3D; characteristic;        </span><br><span class="line">                                    has_model_name_string &#x3D; true;       </span><br><span class="line">                                &#125;</span><br><span class="line">                                if(characteristic.uuid &#x3D;&#x3D; TEM_TEMPERATURE)  &#x2F;&#x2F;温度</span><br><span class="line">                                &#123;</span><br><span class="line">                                    tem_temperature &#x3D; characteristic; </span><br><span class="line">                                    has_tem_temperature &#x3D; true;</span><br><span class="line">                                &#125;     </span><br><span class="line">                                if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    console.log(&quot;FINISHED DISCOVERY&quot;); </span><br><span class="line">                                    setDiscoveryStatus(true);       </span><br><span class="line">                                    &#x2F;&#x2F;setDiscoveryStatus(true);                  </span><br><span class="line">                                &#125;    </span><br><span class="line">                            &#125;);     </span><br><span class="line">                        &#125;);    </span><br><span class="line">                    &#125;);  </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;  </span><br><span class="line">		var i&#x3D;0,j&#x3D;0;</span><br><span class="line">        function randomLEDs(ct)   &#x2F;&#x2F;控制led</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;randomLEDs&quot;);   </span><br><span class="line">            &#x2F;&#x2F; state validation   </span><br><span class="line">            if (!connected) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!services_discovered) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">                return;  </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_led_service) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the LED service&quot;);     </span><br><span class="line">                return;  </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_led_matrix_state) </span><br><span class="line">            &#123;      </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;);      </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">			var led_array&#x3D;[];</span><br><span class="line">			if(ct&#x3D;&#x3D;0)</span><br><span class="line">			&#123;</span><br><span class="line">				 led_array[0] &#x3D;	1&lt;&lt;i;</span><br><span class="line">				 led_array[1] &#x3D; 1&lt;&lt;i;   </span><br><span class="line">				 led_array[2] &#x3D; 1&lt;&lt;i;   </span><br><span class="line">				 led_array[3] &#x3D; 1&lt;&lt;i;   </span><br><span class="line">				 led_array[4] &#x3D; 1&lt;&lt;i;</span><br><span class="line">				 i++;</span><br><span class="line">				 if(i&#x3D;&#x3D;5)i&#x3D;0;</span><br><span class="line">			&#125;</span><br><span class="line">			else if(ct&#x3D;&#x3D;1)</span><br><span class="line">			&#123;</span><br><span class="line">				led_array[0] &#x3D; 0;</span><br><span class="line">				led_array[1] &#x3D; 0;   </span><br><span class="line">				led_array[2] &#x3D; 0;   </span><br><span class="line">				led_array[3] &#x3D; 0;   </span><br><span class="line">				led_array[4] &#x3D; 0;</span><br><span class="line">				led_array[j] &#x3D; 31;</span><br><span class="line">				j++;</span><br><span class="line">				if(j&#x3D;&#x3D;5)j&#x3D;0;</span><br><span class="line">			&#125;</span><br><span class="line">			 </span><br><span class="line"></span><br><span class="line">             &#x2F;&#x2F; Math.random():0~1  Math.floor(x):返回小于等于x的最大整数</span><br><span class="line">            &#x2F;*led_array[0] &#x3D;10;  </span><br><span class="line">            led_array[1] &#x3D; 31;   </span><br><span class="line">            led_array[2] &#x3D; 31;   </span><br><span class="line">            led_array[3] &#x3D; 14;   </span><br><span class="line">            led_array[4] &#x3D; 4;*&#x2F;</span><br><span class="line">            &#x2F;*led_array[0] &#x3D; 31;  </span><br><span class="line">            led_array[1] &#x3D; 17;   </span><br><span class="line">            led_array[2] &#x3D; 17;   </span><br><span class="line">            led_array[3] &#x3D; 17;   </span><br><span class="line">            led_array[4] &#x3D; 31; *&#x2F;</span><br><span class="line"> </span><br><span class="line">            var led_matrix_data &#x3D; new Uint8Array(led_array); </span><br><span class="line"></span><br><span class="line">            led_matrix_state.writeValue(led_matrix_data.buffer)</span><br><span class="line">            .then(_ &#x3D;&gt; &#123;   </span><br><span class="line">                console.log(&#39;LED matrix state changed&#39;);  </span><br><span class="line">                &#125;)  </span><br><span class="line">            .catch(error &#x3D;&gt; &#123;   </span><br><span class="line">                console.log(&#39;Error: &#39; + error);   </span><br><span class="line">                alert(&#39;Error: &#39; + error);   return;  </span><br><span class="line">                &#125;); </span><br><span class="line">        &#125;  </span><br><span class="line">        function readModelNumber()  &#x2F;&#x2F; 蓝牙信息服务</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;readModelNumber&quot;);   </span><br><span class="line">            &#x2F;&#x2F; state validation   </span><br><span class="line">            if (!connected) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!services_discovered) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;    </span><br><span class="line">            if (!has_device_information_service) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the device information service&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_model_name_string) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            </span><br><span class="line">            model_number_string.readValue()</span><br><span class="line">            .then(value &#x3D;&gt; &#123;   </span><br><span class="line">                data &#x3D; new Uint8Array(value.buffer);   </span><br><span class="line">                model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data);  </span><br><span class="line">                console.log(model_number_string);   </span><br><span class="line">                document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string;  </span><br><span class="line">                &#125;)  </span><br><span class="line">            .catch(error &#x3D;&gt; &#123;  </span><br><span class="line">                console.log(&#39;Error: &#39; + error);   </span><br><span class="line">                alert(&#39;Error: &#39; + error);   </span><br><span class="line">                return;  </span><br><span class="line">                &#125;); </span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">				  function accelerometer()   &#x2F;&#x2F;加速度传感器</span><br><span class="line">				 &#123;  </span><br><span class="line">				     console.log(&quot;accelerometer&quot;);   </span><br><span class="line">				     &#x2F;&#x2F; state validation   </span><br><span class="line">				     if (!connected) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">				         return;   </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!services_discovered) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">				         return;  </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!has_accelerometer_service) </span><br><span class="line">				     &#123;     </span><br><span class="line">				         alert(&quot;Error: The connected device does not contain the accelerometer service&quot;);     </span><br><span class="line">				         return;  </span><br><span class="line">				     &#125;   </span><br><span class="line">				     if (!has_accelerometer_data) </span><br><span class="line">				     &#123;      </span><br><span class="line">				         alert(&quot;Error: The connected device does not contain the accelerometer_data characteristic&quot;);      </span><br><span class="line">				         return;   </span><br><span class="line">				     &#125;   </span><br><span class="line">				 </span><br><span class="line">				     accelerometer_data.readValue()</span><br><span class="line">				    .then(value &#x3D;&gt; &#123;</span><br><span class="line">				      buffer &#x3D; value.buffer;</span><br><span class="line">				      dataview &#x3D; new DataView(buffer);</span><br><span class="line">				      X &#x3D; dataview.getUint16(0, true);</span><br><span class="line">				      Y &#x3D; dataview.getUint16(2, true);</span><br><span class="line">				      Z &#x3D; dataview.getUint16(4, true);</span><br><span class="line">				      console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z);</span><br><span class="line">				      document.getElementById(&quot;ac_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;,Z&#x3D;&quot; + Z;</span><br><span class="line">				        &#125;)  </span><br><span class="line">				    .catch(error &#x3D;&gt; &#123;  </span><br><span class="line">				        console.log(&#39;Error: &#39; + error);   </span><br><span class="line">				        alert(&#39;Error: &#39; + error);   </span><br><span class="line">				        return;  </span><br><span class="line">				        &#125;); </span><br><span class="line">				        </span><br><span class="line">				       </span><br><span class="line">				 &#125;  </span><br><span class="line">				 </span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h2&gt;  Status</span><br><span class="line">        &lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td&gt;     &lt;b&gt;Connected&lt;&#x2F;b&gt;   &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td&gt;     &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt;   &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;&#x2F;table&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            Device Discovery or Disconnect</span><br><span class="line">        &lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;button id &#x3D; &quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt;  </span><br><span class="line">        &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs(0)&quot;&gt;控制led行&lt;&#x2F;button&gt;</span><br><span class="line">		&lt;button id&#x3D;&quot;btu_write&quot; onclick&#x3D;&quot;randomLEDs(1)&quot;&gt;控制led列&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;h3&gt;Read Characteristic - Model number&lt;&#x2F;h3&gt;  </span><br><span class="line">        &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model number&lt;&#x2F;button&gt; </span><br><span class="line">        &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;h3&gt;accelerometer_data&lt;&#x2F;h3&gt;</span><br><span class="line">		&lt;button id&#x3D;&quot;btn_readAC&quot; onclick&#x3D;&quot;accelerometer()&quot;&gt;Read accelerometer_data&lt;&#x2F;button&gt; </span><br><span class="line">		&lt;div id&#x3D;&quot;ac_data&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>





<p><strong>憨憨去这个网址，谢谢：</strong><a href="https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/" target="_blank" rel="noopener">https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/</a></p>
<p>附(free):</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2805825880,2963780096&fm=26&gp=0.jpg" alt="点击查看源网页"></p>
]]></content>
  </entry>
  <entry>
    <title>读写特性</title>
    <url>/2020/06/20/%E8%AF%BB%E5%86%99%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="蓝牙的读写特性"><a href="#蓝牙的读写特性" class="headerlink" title="蓝牙的读写特性"></a>蓝牙的读写特性</h2><p>html 文件参考代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  &#x2F;&#x2F; presence of services and characteristics </span><br><span class="line">  var has_accelerometer_service &#x3D; false; </span><br><span class="line">        var has_accelerometer_data &#x3D; false; </span><br><span class="line">        var has_led_service &#x3D; false;</span><br><span class="line">        var has_led_matrix_state &#x3D; false; </span><br><span class="line">        var has_device_information_service &#x3D; false; </span><br><span class="line">        var has_model_name_string &#x3D; false; </span><br><span class="line">    </span><br><span class="line">       &#x2F;&#x2F; service UUIDs </span><br><span class="line">       ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;;</span><br><span class="line">       &#x2F;&#x2F; characteristic UUIDs </span><br><span class="line">       ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       LED_MATRIX_STATE  &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; </span><br><span class="line">       MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; </span><br><span class="line">  </span><br><span class="line">       &#x2F;&#x2F; cached characteristics var accelerometer_data; </span><br><span class="line">        var led_matrix_state; </span><br><span class="line">        var model_number_string;</span><br><span class="line">        </span><br><span class="line">         &#x2F;&#x2F;</span><br><span class="line">         var service_count;</span><br><span class="line">         var services_discovered;</span><br><span class="line">         var characteristics_discovered;  </span><br><span class="line">         var characteristic_count ; </span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;修改discoverDevices函数中的如下代码</span><br><span class="line"> &#x2F;&#x2F;var options &#x3D; &#123;acceptAllDevices:true,</span><br><span class="line">&#x2F;&#x2F;              optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE]  &#x2F;&#x2F;在第5节课上添加</span><br><span class="line">&#x2F;&#x2F;           &#125;        &#x2F;&#x2F;发现所有周边蓝牙设备</span><br><span class="line">var selected_device;</span><br><span class="line">var  connected_server;</span><br><span class="line">var  connected&#x3D;false;</span><br><span class="line"></span><br><span class="line">function discoverDevicesOrdiscover()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;console.log(&quot;End&quot;);</span><br><span class="line">    if(!connected)</span><br><span class="line">    &#123;</span><br><span class="line">        discoverDevices();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">        selected_device.gatt.disconnect();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function onDisconnected()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(&quot;States Scan&quot;);</span><br><span class="line">    resetUI();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function discoverDevices()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(&quot;discoverDevices&quot;);</span><br><span class="line">    var options &#x3D; &#123;acceptAllDevices:true,</span><br><span class="line">                optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE]  &#x2F;&#x2F;在第5节课上添加</span><br><span class="line">            &#125;        &#x2F;&#x2F;发现所有周边蓝牙设备</span><br><span class="line">    navigator.bluetooth.requestDevice(options)</span><br><span class="line">    .then(device &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;&gt; Name:&#39;+device.name);</span><br><span class="line">        console.log(&#39;&gt; Id:&#39;+device.id);</span><br><span class="line">        console.log(&#39;&gt; Connected:&#39;+device.gatt.connected);</span><br><span class="line">        selected_device&#x3D;device;</span><br><span class="line">        console.log(selected_device);</span><br><span class="line">        connect();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(error &#x3D;&gt;&#123;</span><br><span class="line">        alert(&#39;ERROR:&#39; + error);</span><br><span class="line">        console.log(&#39;ERROR:&#39; + error);</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function connect()</span><br><span class="line">&#123;</span><br><span class="line">    console.log(&quot;connecting&quot;);</span><br><span class="line">    selected_device.gatt.connect()</span><br><span class="line">    .then(</span><br><span class="line">        function (server)</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;Connected to&quot;+ server.device.id);</span><br><span class="line">            console.log(&quot;Connected&#x3D;&quot;+ server.connected);</span><br><span class="line">            selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected);</span><br><span class="line">            connected_server&#x3D;server;</span><br><span class="line">            setConnectedStatus(true);</span><br><span class="line">            discoverSvcsAndChars();</span><br><span class="line">        &#125;,</span><br><span class="line">        function(error)</span><br><span class="line">        &#123;</span><br><span class="line">            console.log(&quot;ERROR:could not connct-&quot;+ error);</span><br><span class="line">            alert(&quot;ERROR:could not connct-&quot;+error);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setConnectedStatus(status)</span><br><span class="line">&#123;</span><br><span class="line">    connected &#x3D; status;</span><br><span class="line">    document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status;</span><br><span class="line">    if(status &#x3D;&#x3D; true)</span><br><span class="line">     document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;;</span><br><span class="line">    else</span><br><span class="line">    document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Start Scan&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function resetUI()</span><br><span class="line">&#123;</span><br><span class="line">    setConnectedStatus(false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function discoverSvcsAndChars()    &#x2F;&#x2F;在第5课基础上添加的函数</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); </span><br><span class="line">            connected_server.getPrimaryServices()</span><br><span class="line">            .then(services &#x3D;&gt; </span><br><span class="line">            &#123;    </span><br><span class="line">                    has_accelerometer_service &#x3D; false;    </span><br><span class="line">                    has_led_service &#x3D; false;    </span><br><span class="line">                    has_device_information_service &#x3D; false; </span><br><span class="line">        </span><br><span class="line">                    services_discovered &#x3D; 0;    </span><br><span class="line">                    service_count &#x3D; services.length;    </span><br><span class="line">                    console.log(&quot;Got &quot; + service_count + &quot; services&quot;); </span><br><span class="line">        </span><br><span class="line">                    services.forEach(service &#x3D;&gt; </span><br><span class="line">                    &#123;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE)</span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_accelerometer_service &#x3D; true;    </span><br><span class="line">                        &#125;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; LED_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_led_service &#x3D; true;     </span><br><span class="line">                        &#125;     </span><br><span class="line">                        if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) </span><br><span class="line">                        &#123;      </span><br><span class="line">                            has_device_information_service &#x3D; true;     </span><br><span class="line">                        &#125;     </span><br><span class="line">                        console.log(&#39;Getting Characteristics for service &#39; + service.uuid);     </span><br><span class="line">                        service.getCharacteristics()</span><br><span class="line">                        .then(characteristics &#x3D;&gt; </span><br><span class="line">                        &#123;      </span><br><span class="line">                            console.log(&#39;&gt; Service: &#39; + service.uuid);      </span><br><span class="line">                            services_discovered++;     </span><br><span class="line">                            characteristics_discovered &#x3D; 0;      </span><br><span class="line">                            characteristic_count &#x3D; characteristics.length;      </span><br><span class="line">                            characteristics.forEach(characteristic &#x3D;&gt; </span><br><span class="line">                            &#123;       </span><br><span class="line">                                characteristics_discovered++;       </span><br><span class="line">                                console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid);       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA)</span><br><span class="line">                                &#123;        </span><br><span class="line">                                    accelerometer_data &#x3D; characteristic;        </span><br><span class="line">                                    has_accelerometer_data &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    led_matrix_state &#x3D; characteristic;        </span><br><span class="line">                                    has_led_matrix_state &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    model_number_string &#x3D; characteristic;        </span><br><span class="line">                                    has_model_name_string &#x3D; true;       </span><br><span class="line">                                &#125;       </span><br><span class="line">                                if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) </span><br><span class="line">                                &#123;        </span><br><span class="line">                                    console.log(&quot;FINISHED DISCOVERY&quot;); </span><br><span class="line">                                    &#x2F;&#x2F;setDiscoveryStatus(true);       </span><br><span class="line">                                    &#x2F;&#x2F;setDiscoveryStatus(true);                  </span><br><span class="line">                                &#125;      </span><br><span class="line">                            &#125;);     </span><br><span class="line">                        &#125;);    </span><br><span class="line">                    &#125;);  </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    function randomLEDs()   &#x2F;&#x2F;第6课上添加</span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;randomLEDs&quot;);   </span><br><span class="line">            &#x2F;&#x2F; state validation   </span><br><span class="line">            if (!connected) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!services_discovered) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">                return;  </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_led_service) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the LED service&quot;);     </span><br><span class="line">                return;  </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_led_matrix_state) </span><br><span class="line">            &#123;      </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;);      </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            var led_array &#x3D; [4, 14, 27, 14, 31];   </span><br><span class="line"></span><br><span class="line">             &#x2F;&#x2F; Math.random():0~1  Math.floor(x):返回小于等于x的最大整数</span><br><span class="line">            led_array[0] &#x3D; Math.floor(Math.random(1) * 32);  </span><br><span class="line">            &#x2F;*led_array[1] &#x3D; 1;   </span><br><span class="line">            led_array[2] &#x3D; 2;   </span><br><span class="line">            led_array[3] &#x3D; 3;   </span><br><span class="line">            led_array[4] &#x3D; 4; *&#x2F;</span><br><span class="line"> </span><br><span class="line">            var led_matrix_data &#x3D; new Uint8Array(led_array); </span><br><span class="line"></span><br><span class="line">            led_matrix_state.writeValue(led_matrix_data.buffer)</span><br><span class="line">            .then(_ &#x3D;&gt; &#123;   </span><br><span class="line">                console.log(&#39;LED matrix state changed&#39;);  </span><br><span class="line">                &#125;)  </span><br><span class="line">            .catch(error &#x3D;&gt; &#123;   </span><br><span class="line">                console.log(&#39;Error: &#39; + error);   </span><br><span class="line">                alert(&#39;Error: &#39; + error);   return;  </span><br><span class="line">                &#125;); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        function readModelNumber() </span><br><span class="line">        &#123;  </span><br><span class="line">            console.log(&quot;readModelNumber&quot;);   </span><br><span class="line">            &#x2F;&#x2F; state validation   </span><br><span class="line">            if (!connected) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Discover and connect to a device before using this function&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!services_discovered) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: Service discovery has not yet completed&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;    </span><br><span class="line">            if (!has_device_information_service) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the device information service&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if (!has_model_name_string) </span><br><span class="line">            &#123;     </span><br><span class="line">                alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;);     </span><br><span class="line">                return;   </span><br><span class="line">            &#125;   </span><br><span class="line">            </span><br><span class="line">            model_number_string.readValue()  </span><br><span class="line">            .then(value &#x3D;&gt; &#123;   </span><br><span class="line">                data &#x3D; new Uint8Array(value.buffer);   </span><br><span class="line">                model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data);  </span><br><span class="line">                console.log(model_number_string);   </span><br><span class="line">                document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string;  </span><br><span class="line">                &#125;)  </span><br><span class="line">            .catch(error &#x3D;&gt; &#123;  </span><br><span class="line">                console.log(&#39;Error: &#39; + error);   </span><br><span class="line">                alert(&#39;Error: &#39; + error);   </span><br><span class="line">                return;  </span><br><span class="line">                &#125;); </span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">        Status</span><br><span class="line">    &lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;b&gt;Connected&lt;&#x2F;b&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td id&#x3D;&quot;status_connected&quot;&gt;No Work&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;h2&gt;</span><br><span class="line">        Device Discovery</span><br><span class="line">    &lt;&#x2F;h2&gt;</span><br><span class="line">&lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevicesOrdiscover()&quot;&gt;First&lt;&#x2F;button&gt;</span><br><span class="line">&lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt;  </span><br><span class="line">        &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; </span><br><span class="line"> &lt;h3&gt;Read Characteristic - Model number&lt;&#x2F;h3&gt;  </span><br><span class="line">        &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model number&lt;&#x2F;button&gt; </span><br><span class="line">        &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>其中 readModelNumber 函数即227行到264行为读写特性的代码</p>
<p>在网页中打开 html 文件后</p>
<p>单击Read Model Number执行读取型号函数在下方显示型号，Randomise LEDs控制led灯发生改变</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2805825880,2963780096&fm=26&gp=0.jpg" alt="点击查看源网页"></p>
<p><strong>有问题找憨憨：</strong><a href="https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/" target="_blank" rel="noopener">https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/</a></p>
]]></content>
  </entry>
  <entry>
    <title>服务特性</title>
    <url>/2020/06/19/%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<pre><code>**服务特性**</code></pre><h2 id="一-发现led服务"><a href="#一-发现led服务" class="headerlink" title="一.发现led服务"></a>一.发现led服务</h2><p>这次我们来发现服务中有LED服务，接下来直接编写电脑端的代码</p>
<p>在上一节我们在浏览器里通过蓝牙找到了自己的板子，找到板子之后我们要了解他有什么服务这里我们的客服给出了<a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html" target="_blank" rel="noopener">服务信息网站</a>，大家可以去看看。我们通过js函数获取它的服务，控制他的特性。led显示特性主要通过数组控制，因为他是一个5x5的矩阵，我们用一个5x5的数组控制它显示，即如果要亮第一行的2，3，arry[0]=b:00110;换成十进制就是12；</p>
<h2 id="二-编写电脑端代码"><a href="#二-编写电脑端代码" class="headerlink" title="二.编写电脑端代码"></a>二.编写电脑端代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> has_accelerometer_service = <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">var</span> has_accelerometer_data = <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">var</span> has_led_service = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> has_led_matrix_state = <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">var</span> has_led_text=<span class="literal">false</span>     <span class="comment">//新加的led_text特性相关语句</span></span><br><span class="line"><span class="keyword">var</span> has_device_information_service = <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">var</span> has_model_name_string = <span class="literal">false</span>;</span><br><span class="line">ACCELEROMETER_SERVICE = <span class="string">'e95d0753-251d-470a-a062-fa1922dfa9a8'</span>; </span><br><span class="line"> LED_SERVICE = <span class="string">'e95dd91d-251d-470a-a062-fa1922dfa9a8'</span>; </span><br><span class="line"> DEVICE_INFORMATION_SERVICE = <span class="string">'0000180a-0000-1000-8000-00805f9b34fb'</span>;</span><br><span class="line"><span class="comment">// characteristic UUIDs </span></span><br><span class="line"> ACCELEROMETER_DATA = <span class="string">'e95dca4b-251d-470a-a062-fa1922dfa9a8'</span>; </span><br><span class="line"> LED_MATRIX_STATE  = <span class="string">'e95d7b77-251d-470a-a062-fa1922dfa9a8'</span>; </span><br><span class="line"> LED_TEXT=<span class="string">'e95d93ee-251d-470a-a062-fa1922dfa9a8'</span>  <span class="comment">//新加的led_text特性相关语句</span></span><br><span class="line"> MODEL_NUMBER_STRING = <span class="string">'00002a24-0000-1000-8000-00805f9b34fb'</span>;</span><br><span class="line"> <span class="comment">// cached characteristics var accelerometer_data; </span></span><br><span class="line"> <span class="keyword">var</span> led_matrix_state; </span><br><span class="line"> <span class="keyword">var</span> led_text;          <span class="comment">//新加的led_text特性相关语句</span></span><br><span class="line"> <span class="keyword">var</span> model_number_string;</span><br><span class="line"> <span class="keyword">var</span> accelerometer_data;</span><br><span class="line"><span class="keyword">var</span> options = &#123;<span class="attr">acceptAllDevices</span>:<span class="literal">true</span>,</span><br><span class="line">               optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE]  <span class="comment">//在第5节课上添加</span></span><br><span class="line">           &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">discoverSvcsAndChars</span>(<span class="params"></span>)    //在第5课基础上添加的函数</span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"discoverSvcsAndChars server="</span> + connected_server); </span><br><span class="line">           connected_server.getPrimaryServices()</span><br><span class="line">           .then(<span class="function"><span class="params">services</span> =&gt;</span> </span><br><span class="line">           &#123;    </span><br><span class="line">                   has_accelerometer_service = <span class="literal">false</span>;    </span><br><span class="line">                   has_led_service = <span class="literal">false</span>;    </span><br><span class="line">                   has_device_information_service = <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line">                   services_discovered = <span class="number">0</span>;    </span><br><span class="line">                   service_count = services.length;    </span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">"Got "</span> + service_count + <span class="string">" services"</span>); </span><br><span class="line">       </span><br><span class="line">                   services.forEach(<span class="function"><span class="params">service</span> =&gt;</span> </span><br><span class="line">                   &#123;     </span><br><span class="line">                       <span class="keyword">if</span> (service.uuid == ACCELEROMETER_SERVICE)</span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_accelerometer_service = <span class="literal">true</span>;    </span><br><span class="line">                       &#125;   </span><br><span class="line">                       <span class="keyword">if</span> (service.uuid == LED_SERVICE) </span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_led_service = <span class="literal">true</span>;     </span><br><span class="line">                       &#125;     </span><br><span class="line">                      <span class="keyword">if</span> (service.uuid == DEVICE_INFORMATION_SERVICE) </span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_device_information_service = <span class="literal">true</span>;     </span><br><span class="line">                       &#125; </span><br><span class="line">                       <span class="keyword">if</span> (service.uuid == TEMPERATURE_SERVICE) <span class="comment">//温度</span></span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_temperature_service = <span class="literal">true</span>;     </span><br><span class="line">                       &#125;        </span><br><span class="line">                       <span class="built_in">console</span>.log(<span class="string">'Getting Characteristics for service '</span> + service.uuid);     </span><br><span class="line">                       service.getCharacteristics()</span><br><span class="line">                       .then(<span class="function"><span class="params">characteristics</span> =&gt;</span> </span><br><span class="line">                       &#123;      </span><br><span class="line">                           <span class="built_in">console</span>.log(<span class="string">'&gt; Service: '</span> + service.uuid);      </span><br><span class="line">                           services_discovered++;     </span><br><span class="line">                           characteristics_discovered = <span class="number">0</span>;      </span><br><span class="line">                           characteristic_count = characteristics.length;      </span><br><span class="line">                           characteristics.forEach(<span class="function"><span class="params">characteristic</span> =&gt;</span> </span><br><span class="line">                           &#123;       </span><br><span class="line">                               characteristics_discovered++;       </span><br><span class="line">                               <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; Characteristic: '</span> + characteristic.uuid);       </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == ACCELEROMETER_DATA)</span><br><span class="line">                               &#123;        </span><br><span class="line">                                   accelerometer_data = characteristic;        </span><br><span class="line">                                   has_accelerometer_data = <span class="literal">true</span>;       </span><br><span class="line">                               &#125;      </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == LED_MATRIX_STATE) </span><br><span class="line">                               &#123;        </span><br><span class="line">                                   led_matrix_state = characteristic;        </span><br><span class="line">                                   has_led_matrix_state = <span class="literal">true</span>;       </span><br><span class="line">                               &#125; </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == LED_TEXT)    <span class="comment">//新加的led_text特性相关语句</span></span><br><span class="line">                               &#123;        </span><br><span class="line">                                   led_text = characteristic;        </span><br><span class="line">                                   has_led_text = <span class="literal">true</span>;       </span><br><span class="line">                               &#125;       </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == MODEL_NUMBER_STRING) </span><br><span class="line">                               &#123;        </span><br><span class="line">                                   model_number_string = characteristic;        </span><br><span class="line">                                   has_model_name_string = <span class="literal">true</span>;       </span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">if</span> (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) </span><br><span class="line">                               &#123;        </span><br><span class="line">                                   <span class="built_in">console</span>.log(<span class="string">"FINISHED DISCOVERY"</span>); </span><br><span class="line">                                   setDiscoveryStatus(<span class="literal">true</span>);       </span><br><span class="line">                                   <span class="comment">//setDiscoveryStatus(true);                  </span></span><br><span class="line">                               &#125;    </span><br><span class="line">                           &#125;);     </span><br><span class="line">                       &#125;);    </span><br><span class="line">                   &#125;);  </span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDiscoveryStatus</span>(<span class="params">status</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services_discovered=status;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'status_discovered'</span>).innerHTML=status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1"</span>&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;td&gt;     <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Connected<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span>   &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;td&gt;     &lt;b&gt;Service Discovery Completed&lt;/</span>b&gt;   &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">               &lt;/</span>tr&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;td id=<span class="string">"status_connected"</span>&gt; <span class="literal">false</span> &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;td id="status_discovered"&gt; false &lt;/</span>td&gt;</span><br><span class="line">               &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>table&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2805825880,2963780096&fm=26&gp=0.jpg" alt="点击查看源网页"></p>
<h2 id="憨憨：温度服务"><a href="#憨憨：温度服务" class="headerlink" title="憨憨：温度服务"></a>憨憨：温度服务</h2><p>具体流程和led服务一样，不过关键是要确定板子里有温度服务，如果没有可以去编辑<a href="https://makecode.microbit.org/#editor" target="_blank" rel="noopener">网站上加</a>。代码放在上面一起了</p>
<p><img src="https://raw.githubusercontent.com/CCIT18081430121/img/master/20200619194020.jpg" alt="img"></p>
<p><strong>看不懂就算了，别勉强，反正写给我自己看的，不懂去这个网站：</strong><a href="https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/" target="_blank" rel="noopener">https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/</a></p>
]]></content>
  </entry>
  <entry>
    <title>设备连接</title>
    <url>/2020/06/17/%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>​                                                                        <strong>网页连接蓝牙设备</strong></p>
<p>首先我们用到了<strong>Micro：bit</strong>设备来进行学习</p>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1592412079063&di=9a5fe519d645ada0507245e0abba6941&imgtype=0&src=http%3A%2F%2Fattach.dataguru.cn%2Fattachments%2Fportal%2F201507%2F13%2F155749m1u5a536z3sff11s.png" alt="点击查看源网页"></p>
<p><strong>Micro：bit</strong>板支持包括Javasript、Python、Mbed C在内的多种主流的编程语言</p>
<p>创建html文件，输如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="keyword">var</span> selected_device;           <span class="comment">// 保存用户选择的蓝牙设备</span></span><br><span class="line">            <span class="keyword">var</span> connected_server;           <span class="comment">//在第二课基础上添加的变量，保存用户连接的蓝牙设备</span></span><br><span class="line">            <span class="keyword">var</span> connected=<span class="literal">false</span>;            <span class="comment">//在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">discoverDevices</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"discoverDevices"</span>);     <span class="comment">//consol.log 控制台打印输出</span></span><br><span class="line">                <span class="keyword">var</span> options = &#123;<span class="attr">acceptAllDevices</span>:<span class="literal">true</span>&#125;        <span class="comment">//发现所有周边蓝牙设备</span></span><br><span class="line">                navigator.bluetooth.requestDevice(options)      <span class="comment">//Navigator对象，包含有关游览器的信息</span></span><br><span class="line">                .then(<span class="function"><span class="params">device</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'&gt; Name:        '</span> + device.name);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'&gt; Id:          '</span> + device.id);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'&gt; Connected:   '</span> + device.gatt.connected);</span><br><span class="line">                    selected_device = device;</span><br><span class="line">                    <span class="built_in">console</span>.log(selected_device);</span><br><span class="line">                    connect();  </span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(<span class="function"><span class="params">error</span> =&gt;</span>&#123;</span><br><span class="line">                    alert(<span class="string">'ERROR:'</span> +error);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'ERROR:'</span> +error);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"connecting"</span>);</span><br><span class="line">                selected_device.gatt.connect()</span><br><span class="line">                .then(</span><br><span class="line">                    <span class="function"><span class="keyword">function</span>(<span class="params">server</span>)                            //表示连接成功</span></span><br><span class="line"><span class="function">                    </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"Connected to"</span> + server.device.id);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"Connected="</span> + server.connected);</span><br><span class="line">                        connected_server = server;</span><br><span class="line">                        setConnectedStatus(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)                              //表示连接失败</span></span><br><span class="line"><span class="function">                    </span>&#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"ERROR:could not connct-"</span> + error);</span><br><span class="line">                        alert(<span class="string">"ERROR:could not connct-"</span> + error);</span><br><span class="line">                        setConnectedStatus(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">setConnectedStatus</span>(<span class="params">status</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                connected=status;</span><br><span class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'status_connected'</span>).innerHTML=status;</span><br><span class="line">                <span class="keyword">if</span>(status==<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'btn_scan'</span>).innerHTML=<span class="string">"Disconnect"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">document</span>.getElementById(<span class="string">'btn_scan'</span>).innerHTML=<span class="string">"Discover Devices"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body&gt;       </span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            Status  &lt;!-- 显示蓝牙状态--&gt;</span><br><span class="line">        &lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;table border="1"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;    &lt;b&gt;Connected&lt;/</span>b&gt;    &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td id=<span class="string">"status_connected"</span>&gt;False&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        &lt;<span class="regexp">/table&gt; </span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;Device Discovery &lt;/</span>h2&gt;     &lt;!-- 扫描/发现蓝牙设备 --&gt;</span><br><span class="line">        &lt;button id=<span class="string">"btn_scan"</span> onclick=<span class="string">"discoverDevices()"</span>&gt;</span><br><span class="line">            Start scan</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>在没有错误的情况写，在浏览器中打开网页</p>
<p>单点Start scan键开始扫描</p>
<p>在弹出框中选择自己的板子，单点配对</p>
<p>当网页显示ture 则连接成功</p>
<p><img src="https://raw.githubusercontent.com/CCIT18081430121/img/master/20200617221232.jpg" alt="点击查看源网页"></p>
<p><strong>如有疑问或想进一步学习可访问：</strong><a href="https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/" target="_blank" rel="noopener">https://micropython.nxez.com/microbit-tutorial/Micro_bit_Board/</a></p>
]]></content>
  </entry>
  <entry>
    <title>github</title>
    <url>/2020/05/17/github/</url>
    <content><![CDATA[<p>github</p>
<p>账号 <a href="mailto:2944098540@qq.com">2944098540@qq.com</a></p>
<p>新建仓库时 GitHub page 要选择 master 分支</p>
<p>![timg](C:\Users\nsus\Desktop\hexo img\timg.jpg)</p>
]]></content>
  </entry>
  <entry>
    <title>图片的插入和评论</title>
    <url>/2020/03/27/%E5%9B%BE%E7%89%87%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<p>图片的插入</p>
<p><a href="http://image.baidu.com/search/detail?ct=503316480&z=undefined&tn=baiduimagedetail&ipn=d&word=海贼王&step_word=&ie=utf-8&in=&cl=2&lm=-1&st=undefined&hd=undefined&latest=undefined&copyright=undefined&cs=2129255272,1886334624&os=2619448526,4294612036&simid=0,0&pn=50&rn=1&di=144680&ln=1952&fr=&fmq=1585287985390_R&fm=&ic=undefined&s=undefined&se=&sme=&tab=0&width=undefined&height=undefined&face=undefined&is=0,0&istype=0&ist=&jit=&bdtype=11&spn=0&pi=0&gsm=0&objurl=http%3A%2F%2Fimg.qikula.com%2Ffile%2Fimage%2Fpic%2F5a2738672165n3685535332c27.jpg&rpstart=0&rpnum=0&adpicid=0&force=undefined" target="_blank" rel="noopener"><img src="http://img4.imgtn.bdimg.com/it/u=2129255272,1886334624&fm=11&gp=0.jpg" alt="img"></a></p>
<p>Finish</p>
<p>评论</p>
<p>在友言官网注册账号，得到用户ID<br>将<strong>友言ID</strong>复制到NexT主题的配置文件<strong>_config</strong>中，搜索youyan，将<strong>youyan_uid</strong>前面的#号去掉，将id填写到<strong>youyan_uid：</strong>后面。</p>
<p>Finish </p>
]]></content>
  </entry>
  <entry>
    <title>附加功能  背景音乐</title>
    <url>/2020/03/27/%E9%99%84%E5%8A%A0%E5%8A%9F%E8%83%BD%20%20%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<p>附加功能  背景音乐</p>
<p> 进入网易云，找到自己喜欢的歌单，然后点击<strong>生成外链播放器</strong> </p>
<p><a href="http://music.163.com/m/playlist?id=2299097616&amp;userid=1630413757" target="_blank" rel="noopener">http://music.163.com/m/playlist?id=2299097616&amp;userid=1630413757</a></p>
]]></content>
  </entry>
  <entry>
    <title>本地</title>
    <url>/2020/03/27/%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<hr>
<hr>
<p>本地预览</p>
<p><img src="D:%5Cpublic%5C4.png" alt="4"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo new&quot;my 233&#39;s&quot;</span><br></pre></td></tr></table></figure>

<p>Finish</p>
]]></content>
  </entry>
</search>
